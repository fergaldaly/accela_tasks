Parameters:
  DBName:
    Default: "MyExampleDB"
    Description: MySQL database name
    Type: String
  DBUser:
    Default: 'admin'
    Description: Username for MySQL database access
    Type: String
  DBPassword:
    Default: 'admin123'
    Description: Password for MySQL database access
    Type: String    
  DBAZ1:
    Description: First AZ for the RDS instance
    Type: AWS::EC2::AvailabilityZone::Name
  DBAZ2:
    Description: Second AZ for the RDS instance
    Type: AWS::EC2::AvailabilityZone::Name
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  AWSInstanceType2Arch:
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
    us-west-2:
      HVM64: ami-a0cfeed8
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
    eu-west-2:
      HVM64: ami-f976839e
    eu-west-3:
      HVM64: ami-0ebc281c20e89ba4b
    eu-central-1:
      HVM64: ami-0233214e13e500f77
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
    ap-northeast-2:
      HVM64: ami-0a10b2721688ce9d2
    ap-northeast-3:
      HVM64: ami-0d98120a9fb693f07
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
    ap-south-1:
      HVM64: ami-0912f71e06545ad88
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
    ca-central-1:
      HVM64: ami-0b18956f
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
    cn-north-1:
      HVM64: ami-0a4eaf6c4454eda75
    cn-northwest-1:
      HVM64: ami-6b6a7d09

Resources:
  MainVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
   
  DefaultSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MainVPC
      GroupDescription: "Default Security Group for this VPC"
   
  InetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
    
  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InetGateway
      VpcId: !Ref MainVPC
    
  DefaultRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MainVPC
   
  InternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref DefaultRouteTable
      GatewayId: !Ref InetGateway
    
  WebSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref MainVPC
  
  WebRoute:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebSubnet
      RouteTableId: !Ref DefaultRouteTable
      
  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref MainVPC
      AvailabilityZone: !Ref DBAZ1
 
  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref MainVPC
      AvailabilityZone: !Ref DBAZ2
      
  mydbsubnetgroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "DBSubNetGroup"
      DBSubnetGroupName: "rdsinstancegroup"
      SubnetIds: 
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      
    
  WebSubnetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MainVPC
    
  
        
  DBSubNetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database to web server for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebSubnetSecurityGroup
      VpcId: !Ref MainVPC
      
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: MySQL
      DBName: !Ref DBName
      MultiAZ: true
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: "db.m4.large"
      AllocatedStorage: 100
      DBSubnetGroupName: !Ref mydbsubnetgroup
      VPCSecurityGroups:
        - !GetAtt 
          - DBSubNetSecurityGroup
          - GroupId
          
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - Install
        Install:
          packages:
            yum:
              httpd: []
              php: []
              php-mysql: []
          files:
            /var/www/html/index.php:
              content: !Join 
                - ''
                - - |
                    <html>
                  - |2
                      <head>
                  - |2
                        <title>Hello, World!</title>
                  - |2
                        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                  - |2
                      </head>
                  - |2
                      <body>
                  - |2
                        <h1>Cloudformation LAMP Stack example</h1>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          // Print out the current data and time
                  - |2
                          print "The Current Date and Time is: <br/>";
                  - |2
                          print date("g:i A l, F j Y.");
                  - |2
                        ?>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          // Setup a handle for CURL
                  - |2
                          $curl_handle=curl_init();
                  - |2
                          curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                  - |2
                          curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                  - |2
                          // Get the hostname of the intance from the instance metadata
                  - |2
                          curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                  - |2
                          $hostname = curl_exec($curl_handle);
                  - |2
                          if (empty($hostname))
                  - |2
                          {
                  - |2
                            print "Sorry, for some reason, we got no hostname back <br />";
                  - |2
                          }
                  - |2
                          else
                  - |2
                          {
                  - |2
                            print "Server = " . $hostname . "<br />";
                  - |2
                          }
                  - |2
                          // Get the instance-id of the intance from the instance metadata
                  - |2
                          curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                  - |2
                          $instanceid = curl_exec($curl_handle);
                  - |2
                          if (empty($instanceid))
                  - |2
                          {
                  - |2
                            print "Sorry, for some reason, we got no instance id back <br />";
                  - |2
                          }
                  - |2
                          else
                  - |2
                          {
                  - |2
                            print "EC2 instance-id = " . $instanceid . "<br />";
                  - |2
                          }
                  - '      $Database   = "'
                  - !GetAtt 
                    - RDSInstance
                    - Endpoint.Address
                  - |
                    ";
                  - '      $DBUser     = "'
                  - !Ref DBUser
                  - |
                    ";
                  - '      $DBPassword = "'
                  - !Ref DBPassword
                  - |
                    ";
                  - |2
                          print "Database = " . $Database . "<br />";
                  - |2
                          $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)
                  - |2
                                          or die("Could not connect: " . mysql_error());
                  - |2
                          print ("Connected to $Database successfully");
                  - |2
                          mysql_close($dbconnection);
                  - |2
                        ?>
                  - |2
                        <h2>PHP Information</h2>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          phpinfo();
                  - |2
                        ?>
                  - |2
                      </body>
                  - |
                    </html>
              mode: '000600'
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebSubnetSecurityGroup
      SubnetId: !Ref WebSubnet
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum install -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --configsets All '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    DependsOn:
      - InetGateway
      - RDSInstance
Outputs:
    WebsiteURL:
      Description: URL for our LAMP Stack
      Value: !Join 
        - ''
        - - 'http://'
          - !GetAtt 
            - WebServerInstance
            - PublicDnsName
    RDSInstanceName:
      Description: Endpoint of our RDS instance
      Value: !GetAtt 
                - RDSInstance
                - Endpoint.Address
